#!/usr/bin/env perl

use 5.010;

use strict;
use warnings;

use File::Glob qw{ bsd_glob };
use File::Spec;
use Getopt::Long 2.33 qw{ :config auto_version };
use App::Test::More::To::Test2::V0;

our $VERSION = '0.000_001';

{
    my %use_config;
    BEGIN {
	%use_config = map { $_ => 1 } qw{ MSWin32 VMS };
    }

    use constant CFG_FILE	=> $use_config{$^O} ?
	'test-more-to-test2-v0.cfg' : '.test-more-to-test2-v0rc';
}

caller
    or run( @ARGV );

sub run {
    my $self = __PACKAGE__->new( @_ );
    $self->process_options();
    $self->execute();
    return;
}

sub new {
    my ( $class, @args ) = @_;

    # Specify default resource files.
    my %self = (
	_args		=> \@args,
	local_rc	=> CFG_FILE,
	user_rc		=> ( bsd_glob( "~/@{[ CFG_FILE ]}" ) )[0],
    );

    # Override default resource files with environment variables if defined.
    # The user file must exist.
    foreach ( keys %self ) {
	my $envvar = "TEST_MORE_TO_TEST2_V0_\U$_";
	if ( defined $ENV{$envvar} && $ENV{$envvar} ne '' ) {
	    $self{$_} = $ENV{$envvar};
	    $_ eq 'user_rc'
		and $self{"_$_"} = 1;
	}
    }

    # Get resource files from the command line. These must exist.
    {
	state $p = Getopt::Long::Parser->new(
	    config	=> [ qw{ auto_version pass_through } ],
	);

	my $handler = sub { config_file_opt( \%self, @_ ) };

	$p->getoptionsfromarray( \@args, \%self,
	    qw{ dry_run|dry-run! },
	    'local_rc|local-rc|localrc=s',	$handler,
	    'user_rc|user-rc|userrc=s',		$handler,
	    help => sub { pod2usage( { -verbose => 2 } ) },
	);
    }

    return bless \%self, $class;
}

sub process_options {
    my ( $self ) = @_;

    # Read and parse resource files.
    foreach my $key ( qw{ user_rc local_rc } ) {
	my $cfg_path = $self->{$key};
	open my $fh, '<:encoding(utf-8)', $cfg_path
	    or do {
	    $self->{"_$key"}
		or next;
	    die "Failed to open $cfg_path: $!\n";
	};
	my @add_arg;
	my $opt_allowed = 1;
	while ( <$fh> ) {
	    m/ \A \s* [#] /smx
		and next;
	    m/ \S /smx
		or next;
	    s/ \A \s+ //smx;
	    s/ \s+ \z //smx;

	    if ( m/ \A - /smx && $opt_allowed ) {
		push @add_arg, $_;
		$opt_allowed = $_ ne '--';
	    } else {
		state $glob_arg = {
		    local_rc	=> \&File::Glob::bsd_glob,
		    user_rc		=> sub {
			return( grep { -e } bsd_glob( $_ ) );
		    },
		};
		push @add_arg, $glob_arg->{$key}->( $_ );
	    }
	}
	close $fh;

	$self->my_get_options( \@add_arg );
    }

    $self->my_get_options( delete $self->{_args} );

    $self->{_want_files} ||= [ bsd_glob( 't/*.t' ) ];

    delete $self->{slurp}
	and @{ $self->{_want_files} } =
	map { slurp( $_ ) } @{ $self->{_want_files} };

    delete $self->{$_} for qw{ user_rc _user_rc local_rc _local_rc };

    return;
}

sub execute {
    my ( $self ) = @_;

    my @want_files = @{ delete $self->{_want_files} };

    my $app = $self->{_app} ||= do {
	delete local $self->{_app};	# Because it got autovivified.
	App::Test::More::To::Test2::V0->new(
	    %{ $self },
	    die		=> 1,
	);
    };

    foreach my $file ( @want_files ) {
	$app->convert( $file );
	ref $file
	    and print $app->content();
    }

    return;
}

sub config_file_opt {
    my ( $self, $name, $value ) = @_;
    $value =~ m/ \A ~ /smx
	and ( $value ) = bsd_glob( $value );
    $self->{$name} = $value;
    $self->{"_$name"} = 1;
    return;
}

sub my_get_options {
    my ( $self, $args ) = @_;

    state $p = Getopt::Long::Parser->new();

    $p->getoptionsfromarray( $args, $self,
	'local_rc|local-rc|localrc=s',	sub { config_file_opt( $self, @_ ) },
	qw{
	    bail_on_fail|bail-on-fail!
	    explain=s
	    lib=s@
	    load_module|load-module! slurp! suffix=s
	    support_module|support-module=s@
	    support_sub|support-sub=s@
	    uncomment_use|uncomment-use!
	},
    ) or pod2usage( { -verbose => 0 } );

    @{ $args }
	and $self->{_want_files} = [ @{ $args } ];

    # --local-rc from a file does not have to exist.
    delete $self->{_local_rc};

    return;
}

sub pod2usage {
    my @arg = @_;
    require Pod::Usage;
    Pod::Usage::pod2usage( @arg );
    return;
}

sub slurp {
    my ( $file ) = @_;
    local $/ = undef;
    open my $fh, '<', $file
	or die "Unable to open $file: $!\n";
    my $content = <$fh>;
    close $fh;
    return \$content;
}

__END__

=head1 TITLE

test-more-to-test2-v0 - Convert Test::More tests to Test2::V0

=head1 SYNOPSIS

 test-more-to-test2-v0
 test-more-to-test2-v0 t/test.t
 test-more-to-test2-v0 --help
 test-more-to-test2-v0 --version

=head1 OPTIONS

=head2 --bail-on-fail

If this Boolean option is asserted the script removes calls to
C<BAIL_OUT()>, and installs
L<Test2::Plugin::BailOnFail|Test2::Plugin::BailOnFail>. Otherwise it
just installs its own C<BAIL_OUT()> subroutine.

The default is C<-no-bail-on-fail>.

=head2 --dry-run

If this Boolean option is asserted, all conversions are done, but
nothing is written back to the disk.

The default is C<--no-dry-run>.

=head2 --explain

 --explain Data::Dumper=Dumper

This option controls how C<explain()> is converted. The argument is a
string specifying the module to import and the subroutine to use in
place of C<explain()>.

The default is C<--explain Test2::Tools::Explain=explain>.

=head2 --help

This option displays the documentation for this script. The script then
exits.

=head2 --lib

 --lib inc

This option specifies a directory to be search for support modules in
addition to those in C<@INC>. It can be specified more than once.

=head2 --load-module

If this Boolean option is asserted and either C<use_ok()> or
C<require_ok() is encountered,

  use Test2::Tools::LoadModule qw{ :more };

is added to the top of the module to supply them.

Otherwise C<use_ok ... > is converted to C<use ok ...;>, and
C<require_ok $module > is converted to

 ok lives { require $module }, "require $module" or diag <<"EOD"
     Tried to require '$module'
     Error: \$@
 EOD

The diagnostic is omitted if the C<require_ok()> is followed by anything
but C<;>, because the value of
L<Test2::Tools::Basic::diag()|Test2::Tools::Basic> is undocumented.

The default is C<-no-load-module>.

=head2 --local-rc

 --local-rc=convert-test.cfg

This option specifies the path of the local resource file. If the option
is specified on the command line, this file must exist. If the option is
specified in the user resource file, this file need not exist.

If this option is not given, the local resource file defaults to the
value of environment variable C<TEST_MORE_TO_TEST2_V0_USER_RC> if that
exists and is not C<''>. This file need not exist.

If not specified either way, the default is F<test-more-to-test2-v0.cfg>
under Windows or VMS, or F<.test-more-to-test2-v0rc> under any other
operating system. This file need not exist.

=head2 --slurp

If this Boolean option is asserted, any files specified on the command
line are slurped, and their contents are converted and displayed on
C<STDOUT>. Otherwise the files are converted in-place unless
L<--suffix|/--suffix> is specified.

The default is C<--no-slurp>.

=head2 --suffix

If this option is specified and not C<''>, changed files will be backed
up (by renaming) before being rewritten. The name of the backup will be
the name of the original file with the suffix appended.

B<Note> that a leading dot is B<not> implied; if you want F<t/foo.t>
backed up to F<t/foo.t.bak>, you must specify C<--suffix .bak>.

By default, no backup is done, and the original file is overwritten.

=head2 --support-module

 --support-module My::Module::Test

This option specifies a testing support module whose default exports are
to be examined for conflicts with the default exports of
L<Test2::V0|Test2::V0>.

This option can be specified more than once.

=head2 --support-sub

 --support-sub check

This option specifies the name of a testing support subroutine which may
(or may not) conflict with the default exports of
L<Test2::V0|Test2::V0>. This is in addition to subroutines found in the
script being converted and those exported by the modules specified by
L<--support-module|/--support-module>.

This option can be specified more than once.

=head2 --uncomment-use

If this Boolean option is asserted, any comment immediately after and on
the same line as a modified C<use()> or C<no()> statement is removed.
This is to avoid converting something like

 use Test::More 0.88;  # Because of done_testing();

into

 use Test2::V0;  # Because of done_testing();

=head2 --user-rc

 --user-rc=~/convert-test.cfg

This option specifies the path of the user resource file. This
defaults to the value of environment variable
C<TEST_MORE_TO_TEST2_V0_USER_RC> if that exists and is not C<''>. Either
way, the file must exist.

If not specified either way, the default is
F<~/test-more-to-test2-v0.cfg> under Windows or VMS, or
F<~/.test-more-to-test2-v0rc> under any other operating system. This
file need not exist.

=head2 --version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script converts Perl test scripts based on
L<Test::More|Test::More> into scripts based on L<Test2::V0|Test2::V0>.
The file names of scripts to be converted are passed in on the command
line. If none are specified, F<t/*.t> are converted.

For the details of the conversion, see
L<App::Test::More::To::Test2::V0|App::Test::More::To::Test2::V0>,
particularly the documentation of the
L<convert()|App::Test::More::To::Test2::V0/convert> method.

B<Caveat:> Files are modified in-place unless L<--suffix|/--suffix> is
specified.

=head1 RESOURCE FILE

You can configure options using resource files. The name of this
file is F<test-more-to-test2-v0.cfg> under Windows or VMS, or
F<.test-more-to-test2v0rc> under any other operating system. The There
are actually two of these, a user file in the user's home directory, and
a local file in the current directory. Configuration in the local file
takes precedence over the user file, and the command line takes
precedence over both.

A resource file contains command arguments, one per line. Blank
lines and lines whose first non-blank character is C<'#'> will be
ignored.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
