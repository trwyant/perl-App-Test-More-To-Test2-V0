#!/usr/bin/env perl

use 5.014;

use strict;
use warnings;

use File::Glob qw{ bsd_glob };
use Getopt::Long 2.33 qw{ :config auto_version };
use App::Test::More::To::Test2::V0;

our $VERSION = '0.000_001';

my %opt;

GetOptions( \%opt,
    qw{
	bail_on_fail|bail-on-fail! load_module|load-module!
	slurp! use_context|use-context!
    },
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

my $app = App::Test::More::To::Test2::V0->new(
    %opt,
    die		=> 1,
);

@ARGV
    or @ARGV = bsd_glob( 't/*.t' );

$opt{slurp}
    and @ARGV = map { slurp( $_ ) } @ARGV;

foreach my $file ( @ARGV ) {
    if ( ref $file ) {
	print $app->convert( $file );
    } else {
	$app->convert( $file );
    }
}

sub pod2usage {
    my @arg = @_;
    require Pod::Usage;
    Pod::Usage::pod2usage( @arg );
    return;
}

sub slurp {
    my ( $file ) = @_;
    local $/ = undef;
    open my $fh, '<', $file
	or die "Unable to open $file: $!\n";
    my $content = <$fh>;
    close $fh;
    return \$content;
}

__END__

=head1 TITLE

test-more-to-test2-v0 - Convert Test::More tests to Test2::V0

=head1 SYNOPSIS

 test-more-to-test2-v0
 test-more-to-test2-v0 t/test.t
 test-more-to-test2-v0 --help
 test-more-to-test2-v0 --version

=head1 OPTIONS

=head2 --bail-on-fail

If this Boolean option is asserted the script removes calls to
C<BAIL_ON_FAIL()>, and installs
L<Test2::Plugin::BailOnFail|Test2::Plugin::BailOnFail>. Otherwise it
just installs its own C<BAIL_ON_FAIL()> subroutine.

The default is C<-no-bail-on-fail>.

=head2 --help

This option displays the documentation for this script. The script then
exits.

=head2 --load-module

If this Boolean option is asserted, C<use_ok( ... )> is left unchanged,
but C<use Test2::Tools::LoadModule qw{ :more };> is added to provide the
code for C<use_ok()>. Otherwise C<use_ok( ... )> is converted to
C<use ok ( ... );>. B<Note> that C<require_ok( ... )> always causes
L<Test2::Tools::LoadModule|Test2::Tools::LoadModule> to be loaded.

The default is C<-no-load-module>.

=head2 --slurp

If this Boolean option is asserted, any files specified on the command
line are slurped, and their contents are converted and displayed on
C<STDOUT>. Otherwise the files are converted in-place.

The default is C<--no-slurp>.

=head2 --use-context

If this Boolean option is asserted, uses of C<$Test::Builder::Level> are
repoaced by code that allocates a C<Test2> context and frees it on scope
exit. Unfortunately this introduces a non-core dependency on
L<Scope::Guard|Scope::Guard>.

If this Boolean option is negated, uses of C<$Test::Builder::Level> are
retained, but L<Test::Builder|Test::Builder> is loaded (without imports)
because that seems to be necessary to get C<$Test::Builder::Level> to
work.

The default is C<--no-use-context>.

=head2 --version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script converts Perl test scripts based on
L<Test::More|Test::More> into scripts based on L<Test2::V0|Test2::V0>.
The file names of scripts to be converted are passed in on the command
line. If none are specified, F<t/*.t> are converted.

B<Caveat:> Files are modified in-place.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
