#!/usr/bin/env perl

use 5.010;

use strict;
use warnings;

use File::Glob qw{ bsd_glob };
use File::Spec;
use Getopt::Long 2.33 qw{ :config auto_version };
use App::Test::More::To::Test2::V0;

our $VERSION = '0.000_001';

{
    my $is_win = {
	MSWin32	=> 1,
    };

    use constant CFG_FILE	=> $is_win->{$^O} ?
	'test-more-to-test2-v0.cfg' : 'test-more-to-test2-v0rc';
}

my %opt;

foreach my $cfg_dir (
    [ 'meta' ],
    [],
    [ $ENV{HOME} ],
) {
    my $cfg_path = File::Spec->catfile( @{ $cfg_dir }, CFG_FILE );
    open my $fh, '<:encoding(utf-8)', $cfg_path
	or next;
    my @add_arg;
    while ( <$fh> ) {
	m/ \A \s* [#] /smx
	    and next;
	m/ \S /smx
	    or next;
	s/ \A \s+ //smx;
	s/ \s+ \z //smx;
	push @add_arg, m/ \A - /smx ? $_ : bsd_glob( $_ );
    }
    close $fh;

    my_get_options( @add_arg );
    last;
}

my_get_options( @ARGV );

my @want_files = @{ delete $opt{_want_files} || [] };

@want_files
    or @want_files = bsd_glob( 't/*.t' );

delete $opt{slurp}
    and @want_files = map { slurp( $_ ) } @want_files;

my $app = App::Test::More::To::Test2::V0->new(
    %opt,
    die		=> 1,
);

foreach my $file ( @want_files ) {
    if ( ref $file ) {
	print $app->convert( $file );
    } else {
	$app->convert( $file );
    }
}

sub my_get_options {
    local @ARGV = @_;

    GetOptions( \%opt,
	qw{
	    bail_on_fail|bail-on-fail! convert=s@
	    load_module|load-module! slurp!
	},
	help => sub { pod2usage( { -verbose => 2 } ) },
    ) or pod2usage( { -verbose => 0 } );

    @ARGV
	and $opt{_want_files} = [ @ARGV ];

    return;
}

sub pod2usage {
    my @arg = @_;
    require Pod::Usage;
    Pod::Usage::pod2usage( @arg );
    return;
}

sub slurp {
    my ( $file ) = @_;
    local $/ = undef;
    open my $fh, '<', $file
	or die "Unable to open $file: $!\n";
    my $content = <$fh>;
    close $fh;
    return \$content;
}

__END__

=head1 TITLE

test-more-to-test2-v0 - Convert Test::More tests to Test2::V0

=head1 SYNOPSIS

 test-more-to-test2-v0
 test-more-to-test2-v0 t/test.t
 test-more-to-test2-v0 --help
 test-more-to-test2-v0 --version

=head1 OPTIONS

=head2 --bail-on-fail

If this Boolean option is asserted the script removes calls to
C<BAIL_OUT()>, and installs
L<Test2::Plugin::BailOnFail|Test2::Plugin::BailOnFail>. Otherwise it
just installs its own C<BAIL_OUT()> subroutine.

The default is C<-no-bail-on-fail>.

=head2 --help

This option displays the documentation for this script. The script then
exits.

=head2 --load-module

If this Boolean option is asserted and either C<use_ok()> or
C<require_ok() is encountered,

  use Test2::Tools::LoadModule qw{ :more };

is added to the top of the module to supply them.

Otherwise C<use_ok ... > is converted to C<use ok ...;>, and
C<require_ok $module > is converted to

 ok lives { require $module }, "require $module" or diag <<"EOD"
     Tried to require '$module'
     Error: \$@
 EOD

The diagnostic is omitted if the C<require_ok()> is followed by anything
but C<;>, because the value of
L<Test2::Tools::Basic::diag()|Test2::Tools::Basic> is undocumented.

The default is C<-no-load-module>.

=head2 --slurp

If this Boolean option is asserted, any files specified on the command
line are slurped, and their contents are converted and displayed on
C<STDOUT>. Otherwise the files are converted in-place.

The default is C<--no-slurp>.

=head2 --version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script converts Perl test scripts based on
L<Test::More|Test::More> into scripts based on L<Test2::V0|Test2::V0>.
The file names of scripts to be converted are passed in on the command
line. If none are specified, F<t/*.t> are converted.

B<Caveat:> Files are modified in-place.

=head1 CONFIGURATION FILE

You can configure options using a configuration file. The name of this
file is F<test-more-to-test2-v0.cfg> under Windows, and
F<test-more-to-test2v0rc> under any other operating system. The
configuration file can be found either in the F<meta/> subdirectory of
the distribution being converted, in the distribution directory itself,
or in the user's home directory. The first one found will be used.

The configuration file contains command arguments, one per line. Blank
lines and lines whose first non-blank character is C<'#'> will be
ignored. Options and arguments specified on the command line override
those specified in the configuration file.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
